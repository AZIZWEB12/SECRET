
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Profiles Collection
    match /profiles/{userId} {
      // READ: 
      // - Admins can read any profile.
      // - Any authenticated user can read their own profile.
      allow get: if request.auth != null && (isAdmin() || request.auth.uid == userId);
      
      // LIST:
      // - Admins can list all user profiles (for the admin dashboard).
      allow list: if request.auth != null && isAdmin();

      // CREATE:
      // - Any user can create their own profile document upon signup.
      // - The userId of the document must match the creator's UID.
      allow create: if request.auth != null && request.auth.uid == userId;

      // UPDATE:
      // - A user can update their own profile (displayName, segment, etc.).
      // - An admin can update any user's profile (e.g., to grant premium status).
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // DELETE:
      // - Deleting profiles is disallowed to maintain data integrity.
      allow delete: if false;
    }
    
    // Quiz Attempts Collection
    match /quizAttempts/{attemptId} {
      // READ, LIST:
      // - A user can only read their own quiz attempts.
      allow get, list: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // CREATE:
      // - An authenticated user can create a quiz attempt for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // UPDATE, DELETE:
      // - Attempts are immutable once created.
      allow update, delete: if false;
    }

    // Payments Collection
    match /payments/{paymentId} {
        // Admins can read and list all payments for verification
        allow get, list: if request.auth != null && isAdmin();
        
        // Users can create their own payment records.
        // Further updates (approval/rejection) are handled by admins.
        allow create: if request.auth != null;

        // Only admins can update the status of a payment
        allow update: if request.auth != null && isAdmin();

        // Payments should not be deleted.
        allow delete: if false;
    }
  }
}
