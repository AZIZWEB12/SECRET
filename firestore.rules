rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /profiles/{userId} {
      // READ: 
      // - An admin can read any profile (for the admin dashboard).
      // - A logged-in user can read their own profile.
      allow get: if isAdmin() || isOwner(userId);
      
      // An admin can list all users. Needed for the /admin/users page.
      allow list: if isAdmin();

      // CREATE: 
      // - A new user can create their own profile document.
      // - The check `resource.data.role == 'user'` can be bypassed for the very first user.
      allow create: if isOwner(userId) && (
                      // This allows the very first user to be created as an admin
                      !exists(/databases/$(database)/documents/profiles/$(userId)) || 
                      // Subsequent users must be created with the 'user' role
                      request.resource.data.role == 'user'
                    );

      // UPDATE:
      // - A user can update their own profile.
      // - An admin can update any user's profile (e.g., to make them premium).
      allow update: if isOwner(userId) || isAdmin();
    }

    match /quizAttempts/{attemptId} {
      // CREATE: A logged-in user can create their own quiz attempts.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // READ: A user can only read their own quiz attempts.
      allow get, list: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Fallback security rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
