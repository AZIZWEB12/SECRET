rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isFirstUser() {
        return !exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) && 
               get( /databases/$(database)/documents/profiles).size() == 0;
    }

    // Profiles
    match /profiles/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
    }
    
    // Check if user is first to grant admin
    match /profiles/{userId} {
       allow create: if isFirstUser();
    }
    
    match /profiles/{document=**} {
        allow list: if isAdmin();
    }

    // Quiz Attempts
    match /quizAttempts/{attemptId} {
      allow create: if isSignedIn();
      allow read, list: if isSignedIn() && request.query.where.userId == request.auth.uid;
    }

    // Public Content (read-only for users)
    match /quizzes/{quizId} {
      allow read, list: if isSignedIn();
      allow write: if isAdmin();
    }

    match /pdfs/{pdfId} {
      allow read, list: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /videos/{videoId} {
        allow read, list: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /formations/{formationId} {
        allow read, list: if isSignedIn();
        allow write: if isAdmin();
    }

    // Payments (Admin only except for creation)
     match /payments/{paymentId} {
      allow create: if isSignedIn();
      allow read, list, update: if isAdmin();
    }
  }
}
