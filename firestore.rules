rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin';
    }

    match /profiles/{userId} {
      // Allow users to read and update their own profile.
      allow read, update: if request.auth.uid == userId;
      // Allow admins to read any profile
      allow get, list: if isAdmin();
      // Allow any authenticated user to create their own profile document.
      allow create: if request.auth.uid == userId;
    }
    
    match /quizzes/{quizId} {
      // Admins can do anything with quizzes
      allow read, write, delete, list: if isAdmin();
      // Authenticated users can read quizzes (to take them)
      allow get: if request.auth != null;
    }

    match /quizAttempts/{attemptId} {
      // Users can create their own attempts
      allow create: if request.resource.data.userId == request.auth.uid;
      // Users can read their own attempts, admins can read any
      allow get, list: if request.auth.uid == resource.data.userId || isAdmin();
    }
    
    match /pdfs/{pdfId} {
      allow read, list: if request.auth != null;
      allow write, delete: if isAdmin();
    }
    
    match /videos/{videoId} {
      allow read, list: if request.auth != null;
      allow write, delete: if isAdmin();
    }
    
    match /formations/{formationId} {
      allow read, list: if request.auth != null;
      allow write, delete: if isAdmin();
    }

    match /payments/{paymentId} {
        // Only admins can read/list/update payments
        allow read, list, update: if isAdmin();
        // Users can create their own payment record (but not approve it)
        allow create: if request.resource.data.userId == request.auth.uid;
    }
  }
}
