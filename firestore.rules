rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if user has admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Profiles ---
    match /profiles/{userId} {
      // Allow user to read and update their own profile
      allow get, update: if isOwner(userId);
      // Allow a user to create their own profile document
      allow create: if isOwner(userId);
      // Admins can read any profile
      allow list: if isAdmin();
    }
    
    match /profiles/{document=**} {
        // The very first user to sign up becomes an admin.
        // This is a one-time check; subsequent user creations won't have this permission.
        allow create: if !exists(/databases/$(database)/documents/profiles/$(request.auth.uid)) && 
                       getAfter(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role == 'admin' &&
                       !exists(/databases/$(database)/documents/profiles);
    }

    // --- Quizzes and Content ---
    match /quizzes/{quizId} {
      // Anyone authenticated can read quizzes
      allow get, list: if request.auth != null;
      // Only admins can create, update, or delete quizzes
      allow create, update, delete: if isAdmin();
    }

    match /pdfs/{pdfId} {
      allow get, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /videos/{videoId} {
      allow get, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    match /formations/{formationId} {
      allow get, list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // --- User-specific data ---
    match /quizAttempts/{attemptId} {
      // User can create their own attempt
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // User can read their own attempts
      allow get, list: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // --- Payments ---
    match /payments/{paymentId} {
        // Admins can manage all payments
        allow list, get, update: if isAdmin();
        // Users can create payments for themselves
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
  }
}
